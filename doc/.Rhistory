demc_terms$x,
scale=c(4,0.5),
max.words=50,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
set.seed(49)
repb <- colMeans(tbl_df(as.matrix(dtm))[(speech.list$Party=='Republican'),]%>%na.omit())
demc <- colMeans(tbl_df(as.matrix(dtm))[(speech.list$Party=='Democratic'),]%>%na.omit())
repb_careMore <- tidy(repb-demc+10)
demc_careMore <- tidy(demc-repb+10)
par(mfrow=c(1,2), mar = c(0, 0, 3, 0))
wordcloud(repb_careMore$names,
repb_careMore$x,
scale=c(4,0.5),
max.words=50,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(9,"Reds"))
wordcloud(demc_careMore$names,
demc_careMore$x,
scale=c(4,0.5),
max.words=50,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
speech.list$President[order(as.matrix(dtm[,'tariff']),decreasing = TRUE)[1:5]]
speech.list$President[order(as.matrix(dtm[,'job']),decreasing = TRUE)[1:5]]
library(scales)
speech.list$Job <- as.matrix(dtm[,'job'])
speech.list$Economy <- as.matrix(dtm[,'econom'])
speech.list$Date <- as.Date(speech.list$Date,"%Y-%m-%d")
word.reflect <- speech.list%>%filter((Date>as.Date("1952-1-1"))&(Date<as.Date("2017-1-1")))%>%select(Date,Job,Economy)%>%inner_join(unemplyGDP)
p <- ggplot() +
geom_line(data = word.reflect%>%select(Date,Job), aes(x = Date, y = Job, color = "Job")) +
geom_line(data = word.reflect%>%select(Date,Economy), aes(x = Date, y = Economy, color = "Economy")) +
geom_line(data = word.reflect%>%select(Date,Unemployment), aes(x = Date, y = Unemployment, color = "Unemployment")) +
geom_line(data = word.reflect%>%select(Date,GDPperc), aes(x = Date, y = GDPperc, color = "GDPgrowth")) +
xlab('') +
ylab('Temporal Trends')
p
word.reflect <- speech.list%>%filter((Date>as.Date("1952-1-1"))&(Date<as.Date("2017-1-1"))&(type=="nomin"))%>%select(Date,Job,Economy)%>%inner_join(unemplyGDP)
word.reflect$higherUnemployment <- as.factor(word.reflect$Unemployment>median(word.reflect$Unemployment))
word.reflect$higherGDP <- as.factor(word.reflect$GDPperc>median(word.reflect$GDPperc))
#how GDP influent word frequency
GDP.influence <- word.reflect%>%select(Job,Economy,higherGDP,higherUnemployment)%>%group_by(higherGDP)%>%summarise(meanJobFreq=mean(Job),meanEconomyFreq=mean(Economy))
#GDP.influence
GDP.influence <- as.data.frame(list(higherGDP=c(FALSE,FALSE,TRUE,TRUE),Freq=c(0.99,1.46,5.89,2.71),Word=c('Job','Economy','Job','Economy')))
ggplot(GDP.influence, aes(Word, Freq, fill = higherGDP )) +
geom_bar(position = "fill",stat = "identity") +
ggtitle("Word Frequency v.s. GDP growth rate with Inaugural Speeches")
unemployment.influence <- word.reflect%>%select(Job,Economy,higherGDP,higherUnemployment)%>%group_by(higherUnemployment)%>%summarise(meanJobFreq=mean(Job),meanEconomyFreq=mean(Economy))
#unemployment.influence
p_table <- as.data.frame(list(
unemployment=c(pairwise.t.test(word.reflect$Job,word.reflect$higherUnemployment,pool.sd = TRUE,p.adjust.method = "bonf")$p.value,
pairwise.t.test(word.reflect$Economy,word.reflect$higherUnemployment,pool.sd = TRUE,p.adjust.method = "bonf")$p.value),
GDPgrowth=c(pairwise.t.test(word.reflect$Job,word.reflect$higherGDP,pool.sd = TRUE,p.adjust.method = "bonf")$p.value,
pairwise.t.test(word.reflect$Economy,word.reflect$higherGDP,pool.sd = TRUE,p.adjust.method = "bonf")$p.value)))
rownames(p_table) <- c('job','economy')
#print("p value for sample mean:")
p_table
mood_type <- sentence.list%>%filter(type!='speeches')%>%select(type,positive)%>%na.omit()
mood_mean <- mood_type%>%group_by(type)%>%summarise(meanPositive=mean(positive))%>%arrange(desc(meanPositive))
#mood_type <- sentence.list%>%filter(type!='speeches')%>%select(type,joy)%>%na.omit()%>%group_by(type)%>%summarise(goodMood=mean(joy))%>%arrange(desc(goodMood))
mood_mean$meanPositive <- round(mood_mean$meanPositive,digits = 2)
#mood_mean
p <- ggplot(mood_mean,aes(type,meanPositive))
p <- p + geom_bar(stat = "identity",fill=brewer.pal(3,"Reds"))
p
mood_type$type <- as.factor(mood_type$type)
pairwise.t.test(mood_type$positive,mood_type$type,pool.sd = TRUE,p.adjust.method = "bonf")
library(ggplot2)
p <- ggplot(subset(word_freq,freq>765),aes(word,freq))
p <- p + geom_bar(stat = "identity") +
ggtitle("US Presidents's favourite Words")
p <- p + theme(axis.text.x = element_text(angle = 45,hjust = 1))
p
library(wordcloud)
library(RColorBrewer)
library(tidytext)
set.seed(59)
repb_terms <- tidy(colMeans(tbl_df(as.matrix(dtm))[speech.list$Party=='Republican',]%>%na.omit()))
demc_terms <- tidy(colMeans(tbl_df(as.matrix(dtm))[speech.list$Party=='Democratic',]%>%na.omit()))
par(mfrow=c(1,2), mar = c(0, 0, 3, 0))
wordcloud(repb_terms$names,
repb_terms$x,
scale=c(4,0.5),
max.words=50,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(9,"Reds"),title("Republican Presidents"))
library(wordcloud)
library(RColorBrewer)
library(tidytext)
set.seed(59)
repb_terms <- tidy(colMeans(tbl_df(as.matrix(dtm))[speech.list$Party=='Republican',]%>%na.omit()))
demc_terms <- tidy(colMeans(tbl_df(as.matrix(dtm))[speech.list$Party=='Democratic',]%>%na.omit()))
par(mfrow=c(1,2), mar = c(0, 0, 3, 0))
wordcloud(repb_terms$names,
repb_terms$x,
scale=c(4,0.5),
max.words=50,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(9,"Reds"))
wordcloud(demc_terms$names,
demc_terms$x,
scale=c(4,0.5),
max.words=50,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
set.seed(59)
repb_terms_noTrump <- tidy(colMeans(tbl_df(as.matrix(dtm))[(speech.list$Party=='Republican')&(speech.list$File!="DonaldJTrump"),]%>%na.omit()))
par(mfrow=c(1,2), mar = c(0, 0, 3, 0))
wordcloud(repb_terms_noTrump$names,
repb_terms_noTrump$x,
scale=c(4,0.5),
max.words=50,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(9,"Reds"))
wordcloud(demc_terms$names,
demc_terms$x,
scale=c(4,0.5),
max.words=50,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
set.seed(49)
repb <- colMeans(tbl_df(as.matrix(dtm))[(speech.list$Party=='Republican'),]%>%na.omit())
demc <- colMeans(tbl_df(as.matrix(dtm))[(speech.list$Party=='Democratic'),]%>%na.omit())
repb_careMore <- tidy(repb-demc+10)
demc_careMore <- tidy(demc-repb+10)
par(mfrow=c(1,2), mar = c(0, 0, 3, 0))
wordcloud(repb_careMore$names,
repb_careMore$x,
scale=c(4,0.5),
max.words=50,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(9,"Reds"))
wordcloud(demc_careMore$names,
demc_careMore$x,
scale=c(4,0.5),
max.words=50,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
mood_type <- sentence.list%>%filter(type!='speeches')%>%select(type,positive)%>%na.omit()
mood_mean <- mood_type%>%group_by(type)%>%summarise(meanPositive=mean(positive))%>%arrange(desc(meanPositive))
#mood_type <- sentence.list%>%filter(type!='speeches')%>%select(type,joy)%>%na.omit()%>%group_by(type)%>%summarise(goodMood=mean(joy))%>%arrange(desc(goodMood))
mood_mean$meanPositive <- round(mood_mean$meanPositive,digits = 2)
#mood_mean
p <- ggplot(mood_mean,aes(type,meanPositive))
p <- p + geom_bar(stat = "identity",fill=brewer.pal(3,"Reds")) +ggtitle("Positive Levels at Different Types of Speeches")
p
mood_type$type <- as.factor(mood_type$type)
pairwise.t.test(mood_type$positive,mood_type$type,pool.sd = TRUE,p.adjust.method = "bonf")
library(scales)
speech.list$Job <- as.matrix(dtm[,'job'])
speech.list$Economy <- as.matrix(dtm[,'econom'])
speech.list$Date <- as.Date(speech.list$Date,"%Y-%m-%d")
word.reflect <- speech.list%>%filter((Date>as.Date("1952-1-1"))&(Date<as.Date("2017-1-1")))%>%select(Date,Job,Economy)%>%inner_join(unemplyGDP)
p <- ggplot() +
geom_line(data = word.reflect%>%select(Date,Job), aes(x = Date, y = Job, color = "Job")) +
geom_line(data = word.reflect%>%select(Date,Economy), aes(x = Date, y = Economy, color = "Economy")) +
geom_line(data = word.reflect%>%select(Date,Unemployment), aes(x = Date, y = Unemployment, color = "Unemployment")) +
geom_line(data = word.reflect%>%select(Date,GDPperc), aes(x = Date, y = GDPperc, color = "GDPgrowth")) +
ggtitle("Trends for Word Frequencies and Economic Indexes") +
xlab('') +
ylab('Temporal Trends')
p
word.reflect <- speech.list%>%filter((Date>as.Date("1952-1-1"))&(Date<as.Date("2017-1-1"))&(type=="nomin"))%>%select(Date,Job,Economy)%>%inner_join(unemplyGDP)
word.reflect$higherUnemployment <- as.factor(word.reflect$Unemployment>median(word.reflect$Unemployment))
word.reflect$higherGDP <- as.factor(word.reflect$GDPperc>median(word.reflect$GDPperc))
#how GDP influent word frequency
GDP.influence <- word.reflect%>%select(Job,Economy,higherGDP,higherUnemployment)%>%group_by(higherGDP)%>%summarise(meanJobFreq=mean(Job),meanEconomyFreq=mean(Economy))
#GDP.influence
GDP.influence <- as.data.frame(list(higherGDP=c(FALSE,FALSE,TRUE,TRUE),Freq=c(0.99,1.46,5.89,2.71),Word=c('Job','Economy','Job','Economy')))
ggplot(GDP.influence, aes(Word, Freq, fill = higherGDP )) +
geom_bar(position = "fill",stat = "identity") +
ggtitle("Word Frequency v.s. GDP growth rate with Inaugural Speeches")
unemployment.influence <- word.reflect%>%select(Job,Economy,higherGDP,higherUnemployment)%>%group_by(higherUnemployment)%>%summarise(meanJobFreq=mean(Job),meanEconomyFreq=mean(Economy))
#unemployment.influence
p_table <- as.data.frame(list(
unemployment=c(pairwise.t.test(word.reflect$Job,word.reflect$higherUnemployment,pool.sd = TRUE,p.adjust.method = "bonf")$p.value,
pairwise.t.test(word.reflect$Economy,word.reflect$higherUnemployment,pool.sd = TRUE,p.adjust.method = "bonf")$p.value),
GDPgrowth=c(pairwise.t.test(word.reflect$Job,word.reflect$higherGDP,pool.sd = TRUE,p.adjust.method = "bonf")$p.value,
pairwise.t.test(word.reflect$Economy,word.reflect$higherGDP,pool.sd = TRUE,p.adjust.method = "bonf")$p.value)))
rownames(p_table) <- c('job','economy')
#print("p value for sample mean:")
p_table
carOffers <- as.data.frame(list(Young=c(23,25,21,22,21,22,20,23,19,22,19,21),Middle=c(28,27,27,29,26,29,27,30,28,27,26,22),Elderly=c(23,20,25,21,22,23,21,20,19,20,22,21)))
carOffers <- as.data.frame(list(Young=c(23,25,21,22,21,22,20,23,19,22,19,21),Middle=c(28,27,27,29,26,29,27,30,28,27,26,22),Elderly=c(23,20,25,21,22,23,21,20,19,20,22,21)))
summary(carOffers)
carOffers <- as.data.frame(list(Young=c(23,25,21,22,21,22,20,23,19,22,19,21),Middle=c(28,27,27,29,26,29,27,30,28,27,26,22),Elderly=c(23,20,25,21,22,23,21,20,19,20,22,21)))
boxplot(carOffers)
ggplot()+geom_boxplot(carOffers)
library(ggplot2)
ggplot()+geom_boxplot(carOffers)
library(tidyr)
tidy(carOffers)
library(dplyr)
library(tidyr)
carOffers <- data.frame(Young=c(23,25,21,22,21,22,20,23,19,22,19,21),Middle=c(28,27,27,29,26,29,27,30,28,27,26,22),Elderly=c(23,20,25,21,22,23,21,20,19,20,22,21))
carOffers%>%gather(age, price, Young:Elderly)
library(dplyr)
library(tidyr)
library(ggplot2)
carOffers <- data.frame(Young=c(23,25,21,22,21,22,20,23,19,22,19,21),Middle=c(28,27,27,29,26,29,27,30,28,27,26,22),Elderly=c(23,20,25,21,22,23,21,20,19,20,22,21))
carOffers <- carOffers%>%gather(age, price, Young:Elderly)
ggplot()+geom_boxplot(carOffers,aes(age,price))
library(dplyr)
library(tidyr)
library(ggplot2)
carOffers <- data.frame(Young=c(23,25,21,22,21,22,20,23,19,22,19,21),Middle=c(28,27,27,29,26,29,27,30,28,27,26,22),Elderly=c(23,20,25,21,22,23,21,20,19,20,22,21))
carOffers <- carOffers%>%gather(age, price, Young:Elderly)
ggplot()+geom_boxplot(carOffers,aes(factor(age),price))
carOffers
typeof(carOffers$age)
library(dplyr)
library(tidyr)
library(ggplot2)
carOffers <- data.frame(Young=c(23,25,21,22,21,22,20,23,19,22,19,21),Middle=c(28,27,27,29,26,29,27,30,28,27,26,22),Elderly=c(23,20,25,21,22,23,21,20,19,20,22,21))
carOffers <- carOffers%>%gather(age, price, Young:Elderly)
carOffers$age <- as.factor(carOffers$age)
ggplot()+geom_boxplot(carOffers,aes(factor(age),price))
library(dplyr)
library(tidyr)
library(ggplot2)
carOffers <- data.frame(Young=c(23,25,21,22,21,22,20,23,19,22,19,21),Middle=c(28,27,27,29,26,29,27,30,28,27,26,22),Elderly=c(23,20,25,21,22,23,21,20,19,20,22,21))
carOffers <- carOffers%>%gather(age, price, Young:Elderly)
carOffers$age <- as.factor(carOffers$age)
ggplot()+geom_boxplot(data=carOffers,aes(factor(age),price))
qqplot(carOffers$price)
pplot(carOffers$price)
qqnorm(carOffers$price)
qqline
qqnorm(carOffers$price)
qqline()
qqnorm(carOffers$price)
qqline(carOffers$price)
par(mfrow=c(1,3))
qqnorm(carOffers$price)
qqline(carOffers$price)
qqnorm(carOffers$price)
qqline(carOffers$price)
qqnorm(carOffers$price)
qqline(carOffers$price)
par(mfrow=c(1,3))
title('All Groups')
par(mfrow=c(1,3))
qqnorm(carOffers$price)
qqline(carOffers$price)
title('All Groups')
qqnorm(carOffers$price)
qqline(carOffers$price)
qqnorm(carOffers$price)
qqline(carOffers$price)
par(mfrow=c(1,3))
qqnorm(carOffers$price,title('All Groups'))
par(mfrow=c(1,3))
qqnorm(carOffers$price,main="Normal Q-Q Plot for all Groups")
qqline(carOffers$price)
qqnorm(carOffers$price)
qqline(carOffers$price)
qqnorm(carOffers$price)
qqline(carOffers$price)
par(mfrow=c(1,2))
qqnorm(carOffers$price,main="Normal Q-Q Plot for all Groups")
qqline(carOffers$price)
qqnorm(carOffers%>%filter(age==as.factor("Young"))%>%select(price))
par(mfrow=c(1,2))
qqnorm(carOffers$price,main="Normal Q-Q Plot for all Groups")
qqline(carOffers$price)
qqnorm(carOffers%>%filter(age=="Young")%>%select(price))
carOffers%>%filter(age=="Young")%>%select(price)
par(mfrow=c(1,2))
qqnorm(carOffers$price,main="Normal Q-Q Plot for all Groups")
qqline(carOffers$price)
qqnorm(carOffers%>%filter(age=="Young")%>%select(price)$price)
par(mfrow=c(1,2))
qqnorm(carOffers$price,main="Normal Q-Q Plot for all Groups")
qqline(carOffers$price)
y1 <- carOffers%>%filter(age=="Young")%>%select(price)
qqnorm(y1$price)
qqline(y1$price)
par(mfrow=c(2,2))
qqnorm(carOffers$price,main="Normal Q-Q Plot for all Groups")
qqline(carOffers$price)
y1 <- carOffers%>%filter(age=="Young")%>%select(price)
qqnorm(y1$price,main="Normal Q-Q Plot for Young Age Group")
qqline(y1$price)
y2 <- carOffers%>%filter(age=="Middle")%>%select(price)
qqnorm(y2$price,main="Normal Q-Q Plot for Middle Age Group")
qqline(y2$price)
y3 <- carOffers%>%filter(age=="Elderly")%>%select(price)
qqnorm(y3$price,main="Normal Q-Q Plot for Elderly Age Group")
qqline(y3$price)
par(mfrow=c(2,2))
qqnorm(carOffers$price,main="Normal Q-Q Plot for all Groups")
qqline(carOffers$price)
y1 <- carOffers%>%filter(age=="Young")%>%select(price)
qqnorm(y1$price,main="Normal Q-Q Plot for Young Age Group")
qqline(y1$price)
y2 <- carOffers%>%filter(age=="Middle")%>%select(price)
qqnorm(y2$price,main="Normal Q-Q Plot for Middle Age Group")
qqline(y2$price)
y3 <- carOffers%>%filter(age=="Elderly")%>%select(price)
qqnorm(y3$price,main="Normal Q-Q Plot for Elderly Age Group")
qqline(y3$price)
pairwise.t.test(carOffers$age,carOffers$price,pool.sd = TRUE,p.adjust.method = "bonf")
pairwise.t.test(carOffers$price,carOffers$age, pool.sd = TRUE,p.adjust.method = "bonf")
pairwise.t.test(carOffers$price,carOffers$age, pool.sd = TRUE,p.adjust.method = "bonf")
fit <- aov(carOffers$price~carOffers$age)
TukeyHSD(fit)
x = 0:0.01:1
x
x = seq(0,1,100)
x
x = seq(0,1,length=100)
length(x)
x
y = x^20
plot(x,y)
pt(1)
pt(1,19)
2*(1-pt(1,19))
install.packages("cowplot")
install.packages("cowplot")
install.packages("cowplot", repos="http://cran.r-project.org/")
devtools::install_github("wilkelab/cowplot")
updateR
updateR()
install.packages("installr")
require(devtools)
install_github('andreacirilloac/updateR')
updateR()
updateR::updateR()
updateR::updateR(admin_password = 'reinhard970907')
updateR::updateR(admin_password = 'reinhard970907')
R.version()
R.version
R.version
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
library(shiny)
mh2009=read.csv(file="../data/ManhattanHousing.csv")
datatable(sample_n(mh2009, 50))
mh2009=
mh2009%>%
filter(ZIP.CODE>0)%>%
mutate(region=as.character(ZIP.CODE))
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
save(count.df, file="../output/count.RData")
if (!require("choroplethr")) install.packages("choroplethr")
if (!require("devtools")) install.packages("devtools")
library(devtools)
if (!require("choroplethrZip"))
devtools::install_github('arilamstein/choroplethrZip@v1.5.0')
if (!require("ggplot2")) devtools::install_github("hadley/ggplot2")
if (!require("ggmap")) devtools::install_github("dkahle/ggmap")
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
library(ggmap)
library(dplyr)
mh2009.selgeo=
mh2009%>%
sample_n(10)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
if (!require("ggplot2")) devtools::install_github("hadley/ggplot2")
if (!require("ggmap")) devtools::install_github("dkahle/ggmap")
library(ggmap)
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(devtools)
install_version("ggplot2", version = "2.1.0", repos = "http://cran.us.r-project.org")
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if(!require("lubridate")) install.packages('lubridate')
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
install.packages("shiny")
library(shiny)
runExample("01_hello")
mh2009=read.csv(file="../data/ManhattanHousing.csv")
datatable(sample_n(mh2009, 50))
mh2009=
mh2009%>%
filter(ZIP.CODE>0)%>%
mutate(region=as.character(ZIP.CODE))
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
save(count.df, file="../output/count.RData")
if (!require("choroplethr")) install.packages("choroplethr")
if (!require("devtools")) install.packages("devtools")
library(devtools)
if (!require("choroplethrZip"))
devtools::install_github('arilamstein/choroplethrZip@v1.5.0')
if (!require("ggplot2")) devtools::install_github("hadley/ggplot2")
if (!require("ggmap")) devtools::install_github("dkahle/ggmap")
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
library(ggmap)
library(dplyr)
mh2009.selgeo=
mh2009%>%
sample_n(10)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
mh2009.use=
mh2009%>%
mutate(sale.month=month(as.Date(SALE.DATE, "%m/%d/%y")))%>%
mutate(sale.price=ifelse(SALE.PRICE==0, NA, SALE.PRICE))%>%
mutate(footage=ifelse(GROSS.SQUARE.FEET==0, NA, GROSS.SQUARE.FEET))%>%
mutate(unit.price=sale.price/footage)%>%
mutate(bldg.type=substr(BUILDING.CLASS.CATEGORY, 1, 2))%>%
filter(bldg.type %in% c("10", "13", "25", "28"))%>%
arrange(bldg.type)
save(mh2009.use, file="../output/mh2009use.RData")
man.nbhd=c("Central Harlem", "Chelsea and Clinton",
"East Harlem", "Gramercy Park and Murray Hill",
"Greenwich Village and Soho", "Lower Manhattan",
"Lower East Side", "Upper East Side", "Upper West Side",
"Inwood and Washington Heights")
zip.nbhd=list(1:length(man.nbhd))
zip.nbhd[[1]]=c(10026, 10027, 10030, 10037, 10039)
zip.nbhd[[2]]=c(10001, 10011, 10018, 10019, 10020)
zip.nbhd[[3]]=c(10036, 10029, 10035)
zip.nbhd[[4]]=c(10010, 10016, 10017, 10022)
zip.nbhd[[5]]=c(10012, 10013, 10014)
zip.nbhd[[6]]=c(10004, 10005, 10006, 10007, 10038, 10280)
zip.nbhd[[7]]=c(10002, 10003, 10009)
zip.nbhd[[8]]=c(10021, 10028, 10044, 10065, 10075, 10128)
zip.nbhd[[9]]=c(10023, 10024, 10025)
zip.nbhd[[10]]=c(10031, 10032, 10033, 10034, 10040)
runApp('~/Documents/Spring2017/GR5243/MyPrjs/Spr2017-proj2-grp12/app')
runApp('~/Documents/Spring2017/GR5243/MyPrjs/Spr2017-proj2-grp12/app')
