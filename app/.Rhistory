title = "Tense", pch = 16, cex=1, col = MyColors)
count<-table(sentence.list$tense,factor(sentence.list$President))
count<-prop.table(count,2)
count<-count[match(Tense,rownames(count)),]
par(mfrow=c(1, 1), mar=c(9, 2, 4, 5))
barplot(count, main="Percentage of Different Tenses", ylab="Percentage",
col=MyColors,bty='L',
las=2,cex.axis = 0.8, cex.names=0.8)
par(xpd=TRUE)
legend(48,1,legend = Tense,
title = "Tense", cex=0.8, fill = MyColors)
library(ggplot2)
library(tidyr)
# Merge the sub-tenses into main tenses and calculate the mean emotion scores for each main tenses.
past<-sentence.list[sentence.list$tense=="Simple Past"|sentence.list$tense=="Past Perfect"|sentence.list$tense=="Past Continuous"|sentence.list$tense=="Past Perfect Continuous",]
present<-sentence.list[sentence.list$tense=="Simple Present"|sentence.list$tense=="Present Perfect"|sentence.list$tense=="Present Continuous"|sentence.list$tense=="Present Perfect Continuous",]
future<-sentence.list[sentence.list$tense=="Simple Future"|sentence.list$tense=="Future Perfect"|sentence.list$tense=="Future Continuous"|sentence.list$tense=="Future Perfect Continuous",]
past.emo<-sapply(past[,12:21],mean)
present.emo<-sapply(present[,12:21],mean)
future.emo<-sapply(future[,12:21],mean)
time.emo<-cbind(rep(1:10,3),c(past.emo,present.emo,future.emo),c(rep("Past",10),rep("Present",10),rep("Future",10)))
colnames(time.emo)<-c("ID","Score","Tense")
rownames(time.emo)<-NULL
time.emo<-data.frame(time.emo)
time.emo$Score<-round(as.numeric(as.character(time.emo$Score)),2)
ggplot(data=time.emo)+ geom_point(aes(x=ID, y=Score,color=Tense, shape=Tense, size=1))+
scale_x_discrete(name="Emotion", breaks = seq(1,10,by=1),labels = as.character(names(past.emo)))+
labs(title="Comparison of Sentiments in Different Tense", y="Score")
past$President[past$President=="Grover Cleveland - I"|past$President=="Grover Cleveland - II"]<-"Grover Cleveland"
# Take out the 2-term presidents and calculate the mean emotion score for each term.
twoTermList<-as.character(levels(factor(past$President[past$Term==2])))
twoTerm<-NULL
for(i in 1:length(twoTermList)){
twoTerm<-rbind(twoTerm, past[past$President==twoTermList[i],])
}
Term1<-sapply(twoTerm[twoTerm$Term==1,12:21],mean)
Term2<-sapply(twoTerm[twoTerm$Term==2,12:21],mean)
Term<-cbind(rep(1:10,2),c(Term1,Term2),c(rep("Term1",10),rep("Term2",10)))
colnames(Term)<-c("ID","Score","No.Term")
rownames(Term)<-NULL
Term<-data.frame(Term)
Term$Score<-round(as.numeric(as.character(Term$Score)),2)
ggplot(data=Term)+ geom_point(aes(x=ID, y=Score, color=No.Term, shape=No.Term, size=1))+
scale_x_discrete(name="Emotion", breaks = seq(1,10,by=1),labels = as.character(names(Term1)))+
labs(title="Comparison of Sentiments in Different Terms", y="Score")
qnorm(0.9)
knitr::opts_chunk$set(echo = TRUE)
pnorm(log(990/1000), 0.001, 0.015)
set.seed(2009)
niter=1e5
below=rep(0, niter)
for(i in 1:niter){
r=rnorm(5, mean = 0.001, sd=0.015)
logPrice=log(1000)+cumsum(r)
below[i]=as.numeric(logPrice[5]<log(990))
}
mean(below)
above=rep(0, niter)
for(i in 1:niter){
r=rnorm(2, mean = 0.08, sd=0.15)
logPrice=log(80)+cumsum(r)
above[i]=as.numeric(logPrice[2]>=log(90))
}
mean(above)
above2=rep(0, niter)
for(i in 1:niter){
r=rnorm(20, mean = 0.0002, sd=0.03)
logPrice=log(97)+cumsum(r)
above2[i]=as.numeric(logPrice[20]>=log(100))
}
mean(above2)
set.seed(2009)
above=rep(0, niter)
for(i in 1:niter){
r=rnorm(2, mean = 0.08, sd=0.15)
logPrice=log(80)+cumsum(r)
above[i]=as.numeric(logPrice[2]>=log(90))
}
mean(above)
knitr::opts_chunk$set(echo = TRUE)
pnorm(log(990/1000), 0.001, 0.015)
niter=1e5
below=rep(0, niter)
for(i in 1:niter){
r=rnorm(5, mean = 0.001, sd=0.015)
logPrice=log(1000)+cumsum(r)
below[i]=as.numeric(logPrice[5]<log(990))
}
mean(below)
above=rep(0, niter)
for(i in 1:niter){
r=rnorm(2, mean = 0.08, sd=0.15)
logPrice=log(80)+cumsum(r)
above[i]=as.numeric(logPrice[2]>=log(90))
}
mean(above)
above2=rep(0, niter)
for(i in 1:niter){
r=rnorm(20, mean = 0.0002, sd=0.03)
logPrice=log(97)+cumsum(r)
above2[i]=as.numeric(logPrice[20]>=log(100))
}
mean(above2)
21/0.0292+(1000-21/0.0292)*(1+0.0292)^(-4)
(1000/923.18)^(1/3)-1
(1000/888.489)^(1/4)-1
21/0.0292+(1000-21/0.03)*(1+0.03)^(-4)
21/0.03+(1000-21/0.03)*(1+0.03)^(-4)
1000*e^(-5*0.032－0.001*25/2-0.002*125/3)
1000*e^(－5*0.032－0.001*25/2-0.002*125/3)
1000*e^(-5*0.032-0.001*25/2-0.002*125/3)
1000*exp(-5*0.032-0.001*25/2-0.002*125/3)
1000*exp(-5*0.032-0.001*25/2-0.0002*125/3)
1000/(1.0175^4)
1000/(1.021^8)
1000/(1.02^4)
1000/(1.0235^8)
(923.85-887.97)/887.97
(830.42-808.38)/808.38
(932.96-887.97)/887.97
(846.83-808.38)/808.38
(1000-969.71)/969.71
1000000/1.0775
1000000/1.0775*(1+0.00001)*1.0990
1000000*(1+0.0172)
exp(0.0104/4)*1.08/exp(-0.0032/4)
100*exp(0.01)
100*exp(0.005)
100*exp(-0.005)
x=seq(0,4,0.1)
punif(x,0,4)
plot(punif(x,0,4))
plot(x,punif(x,0,4))
plot(x,punif(x,0,4),ylab = "CDF")
plot(x,punif(x,0,4),ylab = "F(x)", main = "Cumulative distribtribution function")
line(x,punif(x,0,4))
lines(x,punif(x,0,4))
x=seq(0,4,0.01)
plot(x,punif(x,0,4),ylab = "F(x)", main = "Cumulative distribtribution function")
lines(x,punif(x,0,4))
540/11
540%11
540 % 11
11*49
0.9^20
0.9^60
0.9^30
0.9^40
0.9^32
0.9^34
0.9^33
540/11
0.015/0.022
poly1 = c(-5.5,0,0)
poly2 = c(0,0,6)
poly3 = 11*c(1,-2,1)
poly4 =  0.17*2*sqrt(6*11)*c(0,1,-1)
poly = poly1+poly2+poly3+poly4
polyroot(poly)
?polyroot
0.4108*0.023+(1-0.4108)*0.045
0.9404*0.023+(1-0.9404)*0.045
0.05/0.07
0.05/0.07*0.65
100*200/(100*200+125*100)
0.6154*0.001+0.3846*0.0015
0.03^2*0.6154+0.04^2*0.3846+2*0.6154*0.3846*0.35*0.03*0.04
(16-5.5)/(11-5.5)
8/11
0.12*0.7273
0.03^2*0.6154+0.04^2*0.3846+2*0.6154*0.3846*0.35*0.03*0.04
0.001368034^0.5
0.023+0.05/0.12*(0.1-0.023)
0.004/0.12^2
0.023+1.5*(0.1-0.023)
0.023+1.8*(0.1-0.023)
0.5*0.1385+0.5*0.1616
(1.5^2*0.12^2+0.08^2)^0.5
(1.8^2*0.12^2+0.1^2)^0.5
0.03^2*0.6154^2+0.04^2*0.3846^2+2*0.6154*0.3846*0.35*0.03*0.04
0.0007763265^0.5
(0.5^2*0.197^2+0.5^2*0.238^2)^0.5
shiny::runApp('Desktop/GR5243/Project2')
runApp('Desktop/GR5243/Project2')
runApp('Desktop/GR5243/Project2')
sign(0)
sign(-1)
sign(-2)
[1,2,3]*[2,1,3]
as.vector(1,2)
as.vector([1,2])
as.vector(c(1,2))
as.vector(c(1,2))*as.vector(c(1,2))
c(1,2)*c(1,2)
shiny::runApp('Desktop/GR5243/Spr2017-proj2-grp12/app')
runApp('Desktop/GR5243/Spr2017-proj2-grp12/app')
runApp('Desktop/GR5243/Spr2017-proj2-grp12/app')
max_div
loc<-function(l){
if (l==11||l==12||l==13||l==14){
return("City")
}
if (l==21||l==22||l==23||l==24){
return("Suburb")
}
if (l==31||l==32||l==33||l==34){
return("Town")
}
if (l==41||l==42||l==43||l==44){
return("Rural")
}
}
for(i in 1:nrow(newtable)){
newtable$Locale[i]<-loc(newtable$Urbanization)
}
View(newtable)
loc<-function(l){
if (l==11||l==12||l==13||l==14){
return("City")
}
if (l==21||l==22||l==23||l==24){
return("Suburb")
}
if (l==31||l==32||l==33||l==34){
return("Town")
}
if (l==41||l==42||l==43||l==44){
return("Rural")
}
}
for(i in 1:nrow(newtable)){
newtable$Locale[i]<-loc(newtable$Urbanization[i])
}
loc<-function(l){
if (l==11||l==12||l==13||l==14){
return("City")
}
if (l==21||l==22||l==23||l==24){
return("Suburb")
}
if (l==31||l==32||l==33||l==34){
return("Town")
}
if (l==41||l==42||l==43||l==44){
return("Rural")
}
}
for(i in 1:nrow(newtable)){
newtable$Locale[i]<-loc(newtable$Urbanization[i])
}
newtable$Urbanization[i]
newtable$Urbanization
tail(newtable$Urbanization)
i
newtable$Urbanization[i]
newtable$Urbanization[1769:1770]
loc<-function(l){
if (l==11||l==12||l==13||l==14){
return("City")
}
if (l==21||l==22||l==23||l==24){
return("Suburb")
}
if (l==31||l==32||l==33||l==34){
return("Town")
}
if (l==41||l==42||l==43||l==44){
return("Rural")
}
else{
return("Unknown")
}
}
for(i in 1:nrow(newtable)){
newtable$Locale[i]<-loc(newtable$Urbanization[i])
}
dataRecent[dataRecent$UID==100654,]
runApp('Desktop/GR5243/Spr2017-proj2-grp12/app')
runApp('Desktop/GR5243/Spr2017-proj2-grp12/app')
runApp('Desktop/GR5243/Spr2017-proj2-grp12/app')
runApp('Desktop/GR5243/Spr2017-proj2-grp12/app')
runApp('Desktop/GR5243/Spr2017-proj2-grp12/app')
runApp('Desktop/GR5243/Spr2017-proj2-grp12/app')
shiny::runApp('Desktop/GR5243/Project2/app')
packages.used=c("dplyr", "xlsx", "leaflet", "RColorBrewer", "scales", "lattice", "shiny","plotly", "ggplot2", "fmsb", "shinyjs","plyr")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library(dplyr)
library(xlsx)
library(plyr)
# Data Loading
dataOriginal <- read.csv("../output/newest_data.csv", header = T, stringsAsFactors = F)
#newtable <- read.csv("../output/newtable.csv", header = T, stringsAsFactors = F)
#load("../output/predictors_rank.RData")
# preprocess data
dataOriginal$OTHERS = dataOriginal$UGDS_ASIAN + dataOriginal$UGDS_AIAN  + dataOriginal$UGDS_NHPI + dataOriginal$UGDS_UNKN + dataOriginal$UGDS_2MOR
dataOriginal$TUITIONFEE_IN[dataOriginal$TUITIONFEE_IN=="NULL"]="-1"
dataOriginal$TUITIONFEE_OUT[dataOriginal$TUITIONFEE_OUT=="NULL"]="-1"
dataRecent <- dataOriginal %>%
select(
UID = UNITID,
Name = INSTNM,
City = CITY,
State = STABBR,
Lat = LATITUDE,
Long = LONGITUDE,
Zip = ZIP,
Link = INSTURL,
AdmRate = ADM_RATE_ALL,
Cost = TUITIONFEE_OUT,
TuitionIN = TUITIONFEE_IN,
International = UGDS_NRA,
Gender.Men = UGDS_MEN,
Gender.Women = UGDS_WOMEN,
White = UGDS_WHITE,
Black = UGDS_BLACK,
Asian = UGDS_ASIAN,
Hispanic = UGDS_HISP,
Other = OTHERS,
one_of(names(dataOriginal[1,29:65]))
) %>%
mutate(
AdmRate = as.numeric(AdmRate),
City = as.character(City),
State = as.character(State),
Cost = as.numeric(as.character(Cost)),
TuitionIN = as.numeric(as.character(TuitionIN)),
Zip = as.character(Zip),
Link = as.character(Link),
White = White/(White+Black+Asian+Hispanic+Other),
Black = Black/(White+Black+Asian+Hispanic+Other),
Asian = Asian/(White+Black+Asian+Hispanic+Other),
Hispanic = Hispanic/(White+Black+Asian+Hispanic+Other),
Other = Other/(White+Black+Asian+Hispanic+Other)
)
####################################################
# for predictor analysis
####################################################
# set a newtable for data exploration.
# transform data format
newtable <- dataOriginal %>%
select(
UID = UNITID,
Name = INSTNM,
AdmRate = ADM_RATE_ALL,
AdmRateGroup = adm_group,
Cost = TUITIONFEE_OUT,
TuitionIN = TUITIONFEE_IN,
ValueAddedByRatio = value_added,
ValueAddedByDifference = value_added_dif,
FamilyIncomeGroup = familyIncome_group,
FirstGeneration = FIRST_GEN,
Region = REGION,
Diversity = diversity,
Popularity = popularity,
SchoolType = Nth_cluster,
FacultySalary = AVGFACSAL,
Debt = DEBT_MDN,
Urbanization = LOCALE,
PercentageOfLoan = PCTFLOAN,
FamilyIncome = MD_FAMINC
)
setwd("~/Desktop/GR5243/Spr2017-proj2-grp12/app")
packages.used=c("dplyr", "xlsx", "leaflet", "RColorBrewer", "scales", "lattice", "shiny","plotly", "ggplot2", "fmsb", "shinyjs","plyr")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library(dplyr)
library(xlsx)
library(plyr)
# Data Loading
dataOriginal <- read.csv("../output/newest_data.csv", header = T, stringsAsFactors = F)
#newtable <- read.csv("../output/newtable.csv", header = T, stringsAsFactors = F)
#load("../output/predictors_rank.RData")
# preprocess data
dataOriginal$OTHERS = dataOriginal$UGDS_ASIAN + dataOriginal$UGDS_AIAN  + dataOriginal$UGDS_NHPI + dataOriginal$UGDS_UNKN + dataOriginal$UGDS_2MOR
dataOriginal$TUITIONFEE_IN[dataOriginal$TUITIONFEE_IN=="NULL"]="-1"
dataOriginal$TUITIONFEE_OUT[dataOriginal$TUITIONFEE_OUT=="NULL"]="-1"
dataRecent <- dataOriginal %>%
select(
UID = UNITID,
Name = INSTNM,
City = CITY,
State = STABBR,
Lat = LATITUDE,
Long = LONGITUDE,
Zip = ZIP,
Link = INSTURL,
AdmRate = ADM_RATE_ALL,
Cost = TUITIONFEE_OUT,
TuitionIN = TUITIONFEE_IN,
International = UGDS_NRA,
Gender.Men = UGDS_MEN,
Gender.Women = UGDS_WOMEN,
White = UGDS_WHITE,
Black = UGDS_BLACK,
Asian = UGDS_ASIAN,
Hispanic = UGDS_HISP,
Other = OTHERS,
one_of(names(dataOriginal[1,29:65]))
) %>%
mutate(
AdmRate = as.numeric(AdmRate),
City = as.character(City),
State = as.character(State),
Cost = as.numeric(as.character(Cost)),
TuitionIN = as.numeric(as.character(TuitionIN)),
Zip = as.character(Zip),
Link = as.character(Link),
White = White/(White+Black+Asian+Hispanic+Other),
Black = Black/(White+Black+Asian+Hispanic+Other),
Asian = Asian/(White+Black+Asian+Hispanic+Other),
Hispanic = Hispanic/(White+Black+Asian+Hispanic+Other),
Other = Other/(White+Black+Asian+Hispanic+Other)
)
####################################################
# for predictor analysis
####################################################
# set a newtable for data exploration.
# transform data format
newtable <- dataOriginal %>%
select(
UID = UNITID,
Name = INSTNM,
AdmRate = ADM_RATE_ALL,
AdmRateGroup = adm_group,
Cost = TUITIONFEE_OUT,
TuitionIN = TUITIONFEE_IN,
ValueAddedByRatio = value_added,
ValueAddedByDifference = value_added_dif,
FamilyIncomeGroup = familyIncome_group,
FirstGeneration = FIRST_GEN,
Region = REGION,
Diversity = diversity,
Popularity = popularity,
SchoolType = Nth_cluster,
FacultySalary = AVGFACSAL,
Debt = DEBT_MDN,
Urbanization = LOCALE,
PercentageOfLoan = PCTFLOAN,
FamilyIncome = MD_FAMINC
)
first_ind <- c(1:(dim(newtable)[2]))[names(newtable)=="AdmRate"]
first_ind
newtable%>%select(AdmRate:PercentageofLoan)%>%mutate_if(is.character,as.numeric)
View(newtable)
newtable%>%select(AdmRate:PercentageOfLoan)%>%mutate_if(is.character,as.numeric)
newtable$ValueAddedbyRatio
newtable$ValueAddedByRatio
shiny::runApp()
runApp()
newtable$Diversity
newtable$ValueAddedByRatio
newtable$ValueAddedByDifference
runApp()
runApp()
runApp()
newtable$Urbanization
newtable[newtable$Name==100663,]
newtable[newtable$Name==100663,]$Urbanization
as.character(newtable[newtable$Name==100663,]$Urbanization)
newtable$Urbanization
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('~/Desktop/Spr2017-proj2-grp12-master-1/app')
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
